{"repo": "google/guava", "path": "guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java", "func_name": "ArrayBasedUnicodeEscaper.escape", "original_string": "@Override\n  public final String escape(String s) {\n    checkNotNull(s); // GWT specific check (do not optimize)\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if ((c < replacementsLength && replacements[c] != null)\n          || c > safeMaxChar\n          || c < safeMinChar) {\n        return escapeSlow(s, i);\n      }\n    }\n    return s;\n  }", "language": "java", "code": "@Override\n  public final String escape(String s) {\n    checkNotNull(s); // GWT specific check (do not optimize)\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if ((c < replacementsLength && replacements[c] != null)\n          || c > safeMaxChar\n          || c < safeMinChar) {\n        return escapeSlow(s, i);\n      }\n    }\n    return s;\n  }", "code_tokens": ["@", "Override", "public", "final", "String", "escape", "(", "String", "s", ")", "{", "checkNotNull", "(", "s", ")", ";", "// GWT specific check (do not optimize)", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", ";", "i", "++", ")", "{", "char", "c", "=", "s", ".", "charAt", "(", "i", ")", ";", "if", "(", "(", "c", "<", "replacementsLength", "&&", "replacements", "[", "c", "]", "!=", "null", ")", "||", "c", ">", "safeMaxChar", "||", "c", "<", "safeMinChar", ")", "{", "return", "escapeSlow", "(", "s", ",", "i", ")", ";", "}", "}", "return", "s", ";", "}"], "docstring": "/*\nThis is overridden to improve performance. Rough benchmarking shows that this almost doubles\nthe speed when processing strings that do not require any escaping.", "docstring_tokens": ["/", "*", "This", "is", "overridden", "to", "improve", "performance", ".", "Rough", "benchmarking", "shows", "that", "this", "almost", "doubles", "the", "speed", "when", "processing", "strings", "that", "do", "not", "require", "any", "escaping", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java#L142-L154", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java", "func_name": "ArrayBasedUnicodeEscaper.escape", "original_string": "@Override\n  protected final char[] escape(int cp) {\n    if (cp < replacementsLength) {\n      char[] chars = replacements[cp];\n      if (chars != null) {\n        return chars;\n      }\n    }\n    if (cp >= safeMin && cp <= safeMax) {\n      return null;\n    }\n    return escapeUnsafe(cp);\n  }", "language": "java", "code": "@Override\n  protected final char[] escape(int cp) {\n    if (cp < replacementsLength) {\n      char[] chars = replacements[cp];\n      if (chars != null) {\n        return chars;\n      }\n    }\n    if (cp >= safeMin && cp <= safeMax) {\n      return null;\n    }\n    return escapeUnsafe(cp);\n  }", "code_tokens": ["@", "Override", "protected", "final", "char", "[", "]", "escape", "(", "int", "cp", ")", "{", "if", "(", "cp", "<", "replacementsLength", ")", "{", "char", "[", "]", "chars", "=", "replacements", "[", "cp", "]", ";", "if", "(", "chars", "!=", "null", ")", "{", "return", "chars", ";", "}", "}", "if", "(", "cp", ">=", "safeMin", "&&", "cp", "<=", "safeMax", ")", "{", "return", "null", ";", "}", "return", "escapeUnsafe", "(", "cp", ")", ";", "}"], "docstring": "Escapes a single Unicode code point using the replacement array and safe range values. If the\ngiven character does not have an explicit replacement and lies outside the safe range then\n{@link #escapeUnsafe} is called.", "docstring_tokens": ["Escapes", "a", "single", "Unicode", "code", "point", "using", "the", "replacement", "array", "and", "safe", "range", "values", ".", "If", "the", "given", "character", "does", "not", "have", "an", "explicit", "replacement", "and", "lies", "outside", "the", "safe", "range", "then", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java#L161-L173", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java", "func_name": "ArrayBasedUnicodeEscaper.nextEscapeIndex", "original_string": "@Override\n  protected final int nextEscapeIndex(CharSequence csq, int index, int end) {\n    while (index < end) {\n      char c = csq.charAt(index);\n      if ((c < replacementsLength && replacements[c] != null)\n          || c > safeMaxChar\n          || c < safeMinChar) {\n        break;\n      }\n      index++;\n    }\n    return index;\n  }", "language": "java", "code": "@Override\n  protected final int nextEscapeIndex(CharSequence csq, int index, int end) {\n    while (index < end) {\n      char c = csq.charAt(index);\n      if ((c < replacementsLength && replacements[c] != null)\n          || c > safeMaxChar\n          || c < safeMinChar) {\n        break;\n      }\n      index++;\n    }\n    return index;\n  }", "code_tokens": ["@", "Override", "protected", "final", "int", "nextEscapeIndex", "(", "CharSequence", "csq", ",", "int", "index", ",", "int", "end", ")", "{", "while", "(", "index", "<", "end", ")", "{", "char", "c", "=", "csq", ".", "charAt", "(", "index", ")", ";", "if", "(", "(", "c", "<", "replacementsLength", "&&", "replacements", "[", "c", "]", "!=", "null", ")", "||", "c", ">", "safeMaxChar", "||", "c", "<", "safeMinChar", ")", "{", "break", ";", "}", "index", "++", ";", "}", "return", "index", ";", "}"], "docstring": "/* Overridden for performance.", "docstring_tokens": ["/", "*", "Overridden", "for", "performance", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java#L176-L188", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.openBufferedStream", "original_string": "public BufferedReader openBufferedStream() throws IOException {\n    Reader reader = openStream();\n    return (reader instanceof BufferedReader)\n        ? (BufferedReader) reader\n        : new BufferedReader(reader);\n  }", "language": "java", "code": "public BufferedReader openBufferedStream() throws IOException {\n    Reader reader = openStream();\n    return (reader instanceof BufferedReader)\n        ? (BufferedReader) reader\n        : new BufferedReader(reader);\n  }", "code_tokens": ["public", "BufferedReader", "openBufferedStream", "(", ")", "throws", "IOException", "{", "Reader", "reader", "=", "openStream", "(", ")", ";", "return", "(", "reader", "instanceof", "BufferedReader", ")", "?", "(", "BufferedReader", ")", "reader", ":", "new", "BufferedReader", "(", "reader", ")", ";", "}"], "docstring": "Opens a new {@link BufferedReader} for reading from this source. This method returns a new,\nindependent reader each time it is called.\n\n<p>The caller is responsible for ensuring that the returned reader is closed.\n\n@throws IOException if an I/O error occurs while of opening the reader", "docstring_tokens": ["Opens", "a", "new", "{", "@link", "BufferedReader", "}", "for", "reading", "from", "this", "source", ".", "This", "method", "returns", "a", "new", "independent", "reader", "each", "time", "it", "is", "called", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L106-L111", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.length", "original_string": "@Beta\n  public long length() throws IOException {\n    Optional<Long> lengthIfKnown = lengthIfKnown();\n    if (lengthIfKnown.isPresent()) {\n      return lengthIfKnown.get();\n    }\n\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      return countBySkipping(reader);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "@Beta\n  public long length() throws IOException {\n    Optional<Long> lengthIfKnown = lengthIfKnown();\n    if (lengthIfKnown.isPresent()) {\n      return lengthIfKnown.get();\n    }\n\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      return countBySkipping(reader);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["@", "Beta", "public", "long", "length", "(", ")", "throws", "IOException", "{", "Optional", "<", "Long", ">", "lengthIfKnown", "=", "lengthIfKnown", "(", ")", ";", "if", "(", "lengthIfKnown", ".", "isPresent", "(", ")", ")", "{", "return", "lengthIfKnown", ".", "get", "(", ")", ";", "}", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "Reader", "reader", "=", "closer", ".", "register", "(", "openStream", "(", ")", ")", ";", "return", "countBySkipping", "(", "reader", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Returns the length of this source in chars, even if doing so requires opening and traversing an\nentire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}.\n\n<p>The default implementation calls {@link #lengthIfKnown} and returns the value if present. If\nabsent, it will fall back to a heavyweight operation that will open a stream, {@link\nReader#skip(long) skip} to the end of the stream, and return the total number of chars that\nwere skipped.\n\n<p>Note that for sources that implement {@link #lengthIfKnown} to provide a more efficient\nimplementation, it is <i>possible</i> that this method will return a different number of chars\nthan would be returned by reading all of the chars.\n\n<p>In either case, for mutable sources such as files, a subsequent read may return a different\nnumber of chars if the contents are changed.\n\n@throws IOException if an I/O error occurs while reading the length of this source\n@since 19.0", "docstring_tokens": ["Returns", "the", "length", "of", "this", "source", "in", "chars", "even", "if", "doing", "so", "requires", "opening", "and", "traversing", "an", "entire", "stream", ".", "To", "avoid", "a", "potentially", "expensive", "operation", "see", "{", "@link", "#lengthIfKnown", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L151-L167", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.copyTo", "original_string": "@CanIgnoreReturnValue\n  public long copyTo(CharSink sink) throws IOException {\n    checkNotNull(sink);\n\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      Writer writer = closer.register(sink.openStream());\n      return CharStreams.copy(reader, writer);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public long copyTo(CharSink sink) throws IOException {\n    checkNotNull(sink);\n\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      Writer writer = closer.register(sink.openStream());\n      return CharStreams.copy(reader, writer);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "long", "copyTo", "(", "CharSink", "sink", ")", "throws", "IOException", "{", "checkNotNull", "(", "sink", ")", ";", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "Reader", "reader", "=", "closer", ".", "register", "(", "openStream", "(", ")", ")", ";", "Writer", "writer", "=", "closer", ".", "register", "(", "sink", ".", "openStream", "(", ")", ")", ";", "return", "CharStreams", ".", "copy", "(", "reader", ",", "writer", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Copies the contents of this source to the given sink.\n\n@return the number of characters copied\n@throws IOException if an I/O error occurs while reading from this source or writing to {@code\nsink}", "docstring_tokens": ["Copies", "the", "contents", "of", "this", "source", "to", "the", "given", "sink", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L208-L222", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.read", "original_string": "public String read() throws IOException {\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      return CharStreams.toString(reader);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "public String read() throws IOException {\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      return CharStreams.toString(reader);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["public", "String", "read", "(", ")", "throws", "IOException", "{", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "Reader", "reader", "=", "closer", ".", "register", "(", "openStream", "(", ")", ")", ";", "return", "CharStreams", ".", "toString", "(", "reader", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Reads the contents of this source as a string.\n\n@throws IOException if an I/O error occurs while reading from this source", "docstring_tokens": ["Reads", "the", "contents", "of", "this", "source", "as", "a", "string", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L229-L239", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.readFirstLine", "original_string": "@NullableDecl\n  public String readFirstLine() throws IOException {\n    Closer closer = Closer.create();\n    try {\n      BufferedReader reader = closer.register(openBufferedStream());\n      return reader.readLine();\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "@NullableDecl\n  public String readFirstLine() throws IOException {\n    Closer closer = Closer.create();\n    try {\n      BufferedReader reader = closer.register(openBufferedStream());\n      return reader.readLine();\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["@", "NullableDecl", "public", "String", "readFirstLine", "(", ")", "throws", "IOException", "{", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "BufferedReader", "reader", "=", "closer", ".", "register", "(", "openBufferedStream", "(", ")", ")", ";", "return", "reader", ".", "readLine", "(", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Reads the first line of this source as a string. Returns {@code null} if this source is empty.\n\n<p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of\ntext that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n\\n}. If the source's content does not end in a line termination sequence, it is treated as if\nit does.\n\n@throws IOException if an I/O error occurs while reading from this source", "docstring_tokens": ["Reads", "the", "first", "line", "of", "this", "source", "as", "a", "string", ".", "Returns", "{", "@code", "null", "}", "if", "this", "source", "is", "empty", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L251-L262", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.readLines", "original_string": "public ImmutableList<String> readLines() throws IOException {\n    Closer closer = Closer.create();\n    try {\n      BufferedReader reader = closer.register(openBufferedStream());\n      List<String> result = Lists.newArrayList();\n      String line;\n      while ((line = reader.readLine()) != null) {\n        result.add(line);\n      }\n      return ImmutableList.copyOf(result);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "public ImmutableList<String> readLines() throws IOException {\n    Closer closer = Closer.create();\n    try {\n      BufferedReader reader = closer.register(openBufferedStream());\n      List<String> result = Lists.newArrayList();\n      String line;\n      while ((line = reader.readLine()) != null) {\n        result.add(line);\n      }\n      return ImmutableList.copyOf(result);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["public", "ImmutableList", "<", "String", ">", "readLines", "(", ")", "throws", "IOException", "{", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "BufferedReader", "reader", "=", "closer", ".", "register", "(", "openBufferedStream", "(", ")", ")", ";", "List", "<", "String", ">", "result", "=", "Lists", ".", "newArrayList", "(", ")", ";", "String", "line", ";", "while", "(", "(", "line", "=", "reader", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "result", ".", "add", "(", "line", ")", ";", "}", "return", "ImmutableList", ".", "copyOf", "(", "result", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Reads all the lines of this source as a list of strings. The returned list will be empty if\nthis source is empty.\n\n<p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of\ntext that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n\\n}. If the source's content does not end in a line termination sequence, it is treated as if\nit does.\n\n@throws IOException if an I/O error occurs while reading from this source", "docstring_tokens": ["Reads", "all", "the", "lines", "of", "this", "source", "as", "a", "list", "of", "strings", ".", "The", "returned", "list", "will", "be", "empty", "if", "this", "source", "is", "empty", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L275-L290", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.isEmpty", "original_string": "public boolean isEmpty() throws IOException {\n    Optional<Long> lengthIfKnown = lengthIfKnown();\n    if (lengthIfKnown.isPresent()) {\n      return lengthIfKnown.get() == 0L;\n    }\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      return reader.read() == -1;\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "public boolean isEmpty() throws IOException {\n    Optional<Long> lengthIfKnown = lengthIfKnown();\n    if (lengthIfKnown.isPresent()) {\n      return lengthIfKnown.get() == 0L;\n    }\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      return reader.read() == -1;\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["public", "boolean", "isEmpty", "(", ")", "throws", "IOException", "{", "Optional", "<", "Long", ">", "lengthIfKnown", "=", "lengthIfKnown", "(", ")", ";", "if", "(", "lengthIfKnown", ".", "isPresent", "(", ")", ")", "{", "return", "lengthIfKnown", ".", "get", "(", ")", "==", "0L", ";", "}", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "Reader", "reader", "=", "closer", ".", "register", "(", "openStream", "(", ")", ")", ";", "return", "reader", ".", "read", "(", ")", "==", "-", "1", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Returns whether the source has zero chars. The default implementation first checks {@link\n#lengthIfKnown}, returning true if it's known to be zero and false if it's known to be\nnon-zero. If the length is not known, it falls back to opening a stream and checking for EOF.\n\n<p>Note that, in cases where {@code lengthIfKnown} returns zero, it is <i>possible</i> that\nchars are actually available for reading. This means that a source may return {@code true} from\n{@code isEmpty()} despite having readable content.\n\n@throws IOException if an I/O error occurs\n@since 15.0", "docstring_tokens": ["Returns", "whether", "the", "source", "has", "zero", "chars", ".", "The", "default", "implementation", "first", "checks", "{", "@link", "#lengthIfKnown", "}", "returning", "true", "if", "it", "s", "known", "to", "be", "zero", "and", "false", "if", "it", "s", "known", "to", "be", "non", "-", "zero", ".", "If", "the", "length", "is", "not", "known", "it", "falls", "back", "to", "opening", "a", "stream", "and", "checking", "for", "EOF", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L334-L348", "partition": "valid"}