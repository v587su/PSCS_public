{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/observers/QueueDrainObserver.java", "func_name": "QueueDrainObserver.fastPathOrderedEmit", "original_string": "protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) {\n        final Observer<? super V> observer = downstream;\n        final SimplePlainQueue<U> q = queue;\n\n        if (wip.get() == 0 && wip.compareAndSet(0, 1)) {\n            if (q.isEmpty()) {\n                accept(observer, value);\n                if (leave(-1) == 0) {\n                    return;\n                }\n            } else {\n                q.offer(value);\n            }\n        } else {\n            q.offer(value);\n            if (!enter()) {\n                return;\n            }\n        }\n        QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this);\n    }", "language": "java", "code": "protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) {\n        final Observer<? super V> observer = downstream;\n        final SimplePlainQueue<U> q = queue;\n\n        if (wip.get() == 0 && wip.compareAndSet(0, 1)) {\n            if (q.isEmpty()) {\n                accept(observer, value);\n                if (leave(-1) == 0) {\n                    return;\n                }\n            } else {\n                q.offer(value);\n            }\n        } else {\n            q.offer(value);\n            if (!enter()) {\n                return;\n            }\n        }\n        QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this);\n    }", "code_tokens": ["protected", "final", "void", "fastPathOrderedEmit", "(", "U", "value", ",", "boolean", "delayError", ",", "Disposable", "disposable", ")", "{", "final", "Observer", "<", "?", "super", "V", ">", "observer", "=", "downstream", ";", "final", "SimplePlainQueue", "<", "U", ">", "q", "=", "queue", ";", "if", "(", "wip", ".", "get", "(", ")", "==", "0", "&&", "wip", ".", "compareAndSet", "(", "0", ",", "1", ")", ")", "{", "if", "(", "q", ".", "isEmpty", "(", ")", ")", "{", "accept", "(", "observer", ",", "value", ")", ";", "if", "(", "leave", "(", "-", "1", ")", "==", "0", ")", "{", "return", ";", "}", "}", "else", "{", "q", ".", "offer", "(", "value", ")", ";", "}", "}", "else", "{", "q", ".", "offer", "(", "value", ")", ";", "if", "(", "!", "enter", "(", ")", ")", "{", "return", ";", "}", "}", "QueueDrainHelper", ".", "drainLoop", "(", "q", ",", "observer", ",", "delayError", ",", "disposable", ",", "this", ")", ";", "}"], "docstring": "Makes sure the fast-path emits in order.\n@param value the value to emit or queue up\n@param delayError if true, errors are delayed until the source has terminated\n@param disposable the resource to dispose if the drain terminates", "docstring_tokens": ["Makes", "sure", "the", "fast", "-", "path", "emits", "in", "order", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/observers/QueueDrainObserver.java#L88-L108", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.amb", "original_string": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> amb(Iterable<? extends ObservableSource<? extends T>> sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        return RxJavaPlugins.onAssembly(new ObservableAmb<T>(null, sources));\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> amb(Iterable<? extends ObservableSource<? extends T>> sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        return RxJavaPlugins.onAssembly(new ObservableAmb<T>(null, sources));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "amb", "(", "Iterable", "<", "?", "extends", "ObservableSource", "<", "?", "extends", "T", ">", ">", "sources", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "sources", ",", "\"sources is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableAmb", "<", "T", ">", "(", "null", ",", "sources", ")", ")", ";", "}"], "docstring": "Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends\na termination notification.\n<p>\n<img width=\"640\" height=\"385\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/amb.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code amb} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T> the common element type\n@param sources\nan Iterable of ObservableSource sources competing to react first. A subscription to each source will\noccur in the same order as in the Iterable.\n@return an Observable that emits the same sequence as whichever of the source ObservableSources first\nemitted an item or sent a termination notification\n@see <a href=\"http://reactivex.io/documentation/operators/amb.html\">ReactiveX operators documentation: Amb</a>", "docstring_tokens": ["Mirrors", "the", "one", "ObservableSource", "in", "an", "Iterable", "of", "several", "ObservableSources", "that", "first", "either", "emits", "an", "item", "or", "sends", "a", "termination", "notification", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "385", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "amb", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "amb", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.ambArray", "original_string": "@SuppressWarnings(\"unchecked\")\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> ambArray(ObservableSource<? extends T>... sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        int len = sources.length;\n        if (len == 0) {\n            return empty();\n        }\n        if (len == 1) {\n            return (Observable<T>)wrap(sources[0]);\n        }\n        return RxJavaPlugins.onAssembly(new ObservableAmb<T>(sources, null));\n    }", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> ambArray(ObservableSource<? extends T>... sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        int len = sources.length;\n        if (len == 0) {\n            return empty();\n        }\n        if (len == 1) {\n            return (Observable<T>)wrap(sources[0]);\n        }\n        return RxJavaPlugins.onAssembly(new ObservableAmb<T>(sources, null));\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "ambArray", "(", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "sources", ",", "\"sources is null\"", ")", ";", "int", "len", "=", "sources", ".", "length", ";", "if", "(", "len", "==", "0", ")", "{", "return", "empty", "(", ")", ";", "}", "if", "(", "len", "==", "1", ")", "{", "return", "(", "Observable", "<", "T", ">", ")", "wrap", "(", "sources", "[", "0", "]", ")", ";", "}", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableAmb", "<", "T", ">", "(", "sources", ",", "null", ")", ")", ";", "}"], "docstring": "Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends\na termination notification.\n<p>\n<img width=\"640\" height=\"385\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/amb.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code ambArray} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T> the common element type\n@param sources\nan array of ObservableSource sources competing to react first. A subscription to each source will\noccur in the same order as in the array.\n@return an Observable that emits the same sequence as whichever of the source ObservableSources first\nemitted an item or sent a termination notification\n@see <a href=\"http://reactivex.io/documentation/operators/amb.html\">ReactiveX operators documentation: Amb</a>", "docstring_tokens": ["Mirrors", "the", "one", "ObservableSource", "in", "an", "array", "of", "several", "ObservableSources", "that", "first", "either", "emits", "an", "item", "or", "sends", "a", "termination", "notification", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "385", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "amb", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "ambArray", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concat", "original_string": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concat(Iterable<? extends ObservableSource<? extends T>> sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        return fromIterable(sources).concatMapDelayError((Function)Functions.identity(), bufferSize(), false);\n    }", "language": "java", "code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concat(Iterable<? extends ObservableSource<? extends T>> sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        return fromIterable(sources).concatMapDelayError((Function)Functions.identity(), bufferSize(), false);\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concat", "(", "Iterable", "<", "?", "extends", "ObservableSource", "<", "?", "extends", "T", ">", ">", "sources", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "sources", ",", "\"sources is null\"", ")", ";", "return", "fromIterable", "(", "sources", ")", ".", "concatMapDelayError", "(", "(", "Function", ")", "Functions", ".", "identity", "(", ")", ",", "bufferSize", "(", ")", ",", "false", ")", ";", "}"], "docstring": "Concatenates elements of each ObservableSource provided via an Iterable sequence into a single sequence\nof elements without interleaving them.\n<p>\n<img width=\"640\" height=\"380\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concat.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concat} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the common value type of the sources\n@param sources the Iterable sequence of ObservableSources\n@return the new Observable instance", "docstring_tokens": ["Concatenates", "elements", "of", "each", "ObservableSource", "provided", "via", "an", "Iterable", "sequence", "into", "a", "single", "sequence", "of", "elements", "without", "interleaving", "them", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "380", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concat", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1099-L1106", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concat", "original_string": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concat(ObservableSource<? extends ObservableSource<? extends T>> sources, int prefetch) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        ObjectHelper.verifyPositive(prefetch, \"prefetch\");\n        return RxJavaPlugins.onAssembly(new ObservableConcatMap(sources, Functions.identity(), prefetch, ErrorMode.IMMEDIATE));\n    }", "language": "java", "code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concat(ObservableSource<? extends ObservableSource<? extends T>> sources, int prefetch) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        ObjectHelper.verifyPositive(prefetch, \"prefetch\");\n        return RxJavaPlugins.onAssembly(new ObservableConcatMap(sources, Functions.identity(), prefetch, ErrorMode.IMMEDIATE));\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concat", "(", "ObservableSource", "<", "?", "extends", "ObservableSource", "<", "?", "extends", "T", ">", ">", "sources", ",", "int", "prefetch", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "sources", ",", "\"sources is null\"", ")", ";", "ObjectHelper", ".", "verifyPositive", "(", "prefetch", ",", "\"prefetch\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableConcatMap", "(", "sources", ",", "Functions", ".", "identity", "(", ")", ",", "prefetch", ",", "ErrorMode", ".", "IMMEDIATE", ")", ")", ";", "}"], "docstring": "Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source\nObservableSource, one after the other, without interleaving them.\n<p>\n<img width=\"640\" height=\"380\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concat.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concat} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T> the common element base type\n@param sources\nan ObservableSource that emits ObservableSources\n@param prefetch\nthe number of ObservableSources to prefetch from the sources sequence.\n@return an Observable that emits items all of the items emitted by the ObservableSources emitted by\n{@code ObservableSources}, one after the other, without interleaving them\n@see <a href=\"http://reactivex.io/documentation/operators/concat.html\">ReactiveX operators documentation: Concat</a>", "docstring_tokens": ["Returns", "an", "Observable", "that", "emits", "the", "items", "emitted", "by", "each", "of", "the", "ObservableSources", "emitted", "by", "the", "source", "ObservableSource", "one", "after", "the", "other", "without", "interleaving", "them", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "380", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concat", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "concat", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatArray", "original_string": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArray(ObservableSource<? extends T>... sources) {\n        if (sources.length == 0) {\n            return empty();\n        } else\n        if (sources.length == 1) {\n            return wrap((ObservableSource<T>)sources[0]);\n        }\n        return RxJavaPlugins.onAssembly(new ObservableConcatMap(fromArray(sources), Functions.identity(), bufferSize(), ErrorMode.BOUNDARY));\n    }", "language": "java", "code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArray(ObservableSource<? extends T>... sources) {\n        if (sources.length == 0) {\n            return empty();\n        } else\n        if (sources.length == 1) {\n            return wrap((ObservableSource<T>)sources[0]);\n        }\n        return RxJavaPlugins.onAssembly(new ObservableConcatMap(fromArray(sources), Functions.identity(), bufferSize(), ErrorMode.BOUNDARY));\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatArray", "(", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "if", "(", "sources", ".", "length", "==", "0", ")", "{", "return", "empty", "(", ")", ";", "}", "else", "if", "(", "sources", ".", "length", "==", "1", ")", "{", "return", "wrap", "(", "(", "ObservableSource", "<", "T", ">", ")", "sources", "[", "0", "]", ")", ";", "}", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableConcatMap", "(", "fromArray", "(", "sources", ")", ",", "Functions", ".", "identity", "(", ")", ",", "bufferSize", "(", ")", ",", "ErrorMode", ".", "BOUNDARY", ")", ")", ";", "}"], "docstring": "Concatenates a variable number of ObservableSource sources.\n<p>\nNote: named this way because of overload conflict with concat(ObservableSource&lt;ObservableSource&gt;)\n<p>\n<img width=\"640\" height=\"290\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArray.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concatArray} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param sources the array of sources\n@param <T> the common base value type\n@return the new Observable instance\n@throws NullPointerException if sources is null", "docstring_tokens": ["Concatenates", "a", "variable", "number", "of", "ObservableSource", "sources", ".", "<p", ">", "Note", ":", "named", "this", "way", "because", "of", "overload", "conflict", "with", "concat", "(", "ObservableSource&lt", ";", "ObservableSource&gt", ";", ")", "<p", ">", "<img", "width", "=", "640", "height", "=", "290", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concatArray", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatArrayDelayError", "original_string": "@SuppressWarnings({ \"unchecked\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayDelayError(ObservableSource<? extends T>... sources) {\n        if (sources.length == 0) {\n            return empty();\n        } else\n        if (sources.length == 1) {\n            return (Observable<T>)wrap(sources[0]);\n        }\n        return concatDelayError(fromArray(sources));\n    }", "language": "java", "code": "@SuppressWarnings({ \"unchecked\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayDelayError(ObservableSource<? extends T>... sources) {\n        if (sources.length == 0) {\n            return empty();\n        } else\n        if (sources.length == 1) {\n            return (Observable<T>)wrap(sources[0]);\n        }\n        return concatDelayError(fromArray(sources));\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", "}", ")", "@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatArrayDelayError", "(", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "if", "(", "sources", ".", "length", "==", "0", ")", "{", "return", "empty", "(", ")", ";", "}", "else", "if", "(", "sources", ".", "length", "==", "1", ")", "{", "return", "(", "Observable", "<", "T", ">", ")", "wrap", "(", "sources", "[", "0", "]", ")", ";", "}", "return", "concatDelayError", "(", "fromArray", "(", "sources", ")", ")", ";", "}"], "docstring": "Concatenates a variable number of ObservableSource sources and delays errors from any of them\ntill all terminate.\n<p>\n<img width=\"640\" height=\"290\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArray.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concatArrayDelayError} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param sources the array of sources\n@param <T> the common base value type\n@return the new Observable instance\n@throws NullPointerException if sources is null", "docstring_tokens": ["Concatenates", "a", "variable", "number", "of", "ObservableSource", "sources", "and", "delays", "errors", "from", "any", "of", "them", "till", "all", "terminate", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "290", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concatArray", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1302-L1313", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatArrayEager", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayEager(ObservableSource<? extends T>... sources) {\n        return concatArrayEager(bufferSize(), bufferSize(), sources);\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayEager(ObservableSource<? extends T>... sources) {\n        return concatArrayEager(bufferSize(), bufferSize(), sources);\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatArrayEager", "(", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "return", "concatArrayEager", "(", "bufferSize", "(", ")", ",", "bufferSize", "(", ")", ",", "sources", ")", ";", "}"], "docstring": "Concatenates an array of ObservableSources eagerly into a single stream of values.\n<p>\n<img width=\"640\" height=\"410\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEager.png\" alt=\"\">\n<p>\nEager concatenation means that once a subscriber subscribes, this operator subscribes to all of the\nsource ObservableSources. The operator buffers the values emitted by these ObservableSources and then drains them\nin order, each one after the previous one completes.\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>This method does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the value type\n@param sources an array of ObservableSources that need to be eagerly concatenated\n@return the new ObservableSource instance with the specified concatenation behavior\n@since 2.0", "docstring_tokens": ["Concatenates", "an", "array", "of", "ObservableSources", "eagerly", "into", "a", "single", "stream", "of", "values", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "410", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concatArrayEager", ".", "png", "alt", "=", ">", "<p", ">", "Eager", "concatenation", "means", "that", "once", "a", "subscriber", "subscribes", "this", "operator", "subscribes", "to", "all", "of", "the", "source", "ObservableSources", ".", "The", "operator", "buffers", "the", "values", "emitted", "by", "these", "ObservableSources", "and", "then", "drains", "them", "in", "order", "each", "one", "after", "the", "previous", "one", "completes", ".", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "This", "method", "does", "not", "operate", "by", "default", "on", "a", "particular", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1332-L1336", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatArrayEager", "original_string": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayEager(int maxConcurrency, int prefetch, ObservableSource<? extends T>... sources) {\n        return fromArray(sources).concatMapEagerDelayError((Function)Functions.identity(), maxConcurrency, prefetch, false);\n    }", "language": "java", "code": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayEager(int maxConcurrency, int prefetch, ObservableSource<? extends T>... sources) {\n        return fromArray(sources).concatMapEagerDelayError((Function)Functions.identity(), maxConcurrency, prefetch, false);\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"rawtypes\"", ",", "\"unchecked\"", "}", ")", "@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatArrayEager", "(", "int", "maxConcurrency", ",", "int", "prefetch", ",", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "return", "fromArray", "(", "sources", ")", ".", "concatMapEagerDelayError", "(", "(", "Function", ")", "Functions", ".", "identity", "(", ")", ",", "maxConcurrency", ",", "prefetch", ",", "false", ")", ";", "}"], "docstring": "Concatenates an array of ObservableSources eagerly into a single stream of values.\n<p>\n<img width=\"640\" height=\"495\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEager.nn.png\" alt=\"\">\n<p>\nEager concatenation means that once a subscriber subscribes, this operator subscribes to all of the\nsource ObservableSources. The operator buffers the values emitted by these ObservableSources and then drains them\nin order, each one after the previous one completes.\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>This method does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the value type\n@param sources an array of ObservableSources that need to be eagerly concatenated\n@param maxConcurrency the maximum number of concurrent subscriptions at a time, Integer.MAX_VALUE\nis interpreted as indication to subscribe to all sources at once\n@param prefetch the number of elements to prefetch from each ObservableSource source\n@return the new ObservableSource instance with the specified concatenation behavior\n@since 2.0", "docstring_tokens": ["Concatenates", "an", "array", "of", "ObservableSources", "eagerly", "into", "a", "single", "stream", "of", "values", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "495", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concatArrayEager", ".", "nn", ".", "png", "alt", "=", ">", "<p", ">", "Eager", "concatenation", "means", "that", "once", "a", "subscriber", "subscribes", "this", "operator", "subscribes", "to", "all", "of", "the", "source", "ObservableSources", ".", "The", "operator", "buffers", "the", "values", "emitted", "by", "these", "ObservableSources", "and", "then", "drains", "them", "in", "order", "each", "one", "after", "the", "previous", "one", "completes", ".", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "This", "method", "does", "not", "operate", "by", "default", "on", "a", "particular", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1358-L1363", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatArrayEagerDelayError", "original_string": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayEagerDelayError(int maxConcurrency, int prefetch, ObservableSource<? extends T>... sources) {\n        return fromArray(sources).concatMapEagerDelayError((Function)Functions.identity(), maxConcurrency, prefetch, true);\n    }", "language": "java", "code": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayEagerDelayError(int maxConcurrency, int prefetch, ObservableSource<? extends T>... sources) {\n        return fromArray(sources).concatMapEagerDelayError((Function)Functions.identity(), maxConcurrency, prefetch, true);\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"rawtypes\"", ",", "\"unchecked\"", "}", ")", "@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatArrayEagerDelayError", "(", "int", "maxConcurrency", ",", "int", "prefetch", ",", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "return", "fromArray", "(", "sources", ")", ".", "concatMapEagerDelayError", "(", "(", "Function", ")", "Functions", ".", "identity", "(", ")", ",", "maxConcurrency", ",", "prefetch", ",", "true", ")", ";", "}"], "docstring": "Concatenates an array of {@link ObservableSource}s eagerly into a single stream of values\nand delaying any errors until all sources terminate.\n<p>\n<img width=\"640\" height=\"460\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEagerDelayError.nn.png\" alt=\"\">\n<p>\nEager concatenation means that once a subscriber subscribes, this operator subscribes to all of the\nsource {@code ObservableSource}s. The operator buffers the values emitted by these {@code ObservableSource}s\nand then drains them in order, each one after the previous one completes.\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>This method does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the value type\n@param sources an array of {@code ObservableSource}s that need to be eagerly concatenated\n@param maxConcurrency the maximum number of concurrent subscriptions at a time, Integer.MAX_VALUE\nis interpreted as indication to subscribe to all sources at once\n@param prefetch the number of elements to prefetch from each {@code ObservableSource} source\n@return the new Observable instance with the specified concatenation behavior\n@since 2.2.1 - experimental", "docstring_tokens": ["Concatenates", "an", "array", "of", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1410-L1415", "partition": "test"}